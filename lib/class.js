"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QwOss = void 0;
var _aliOss = _interopRequireDefault(require("ali-oss"));
var _multipartUpload = require("./src/multipart-upload");
var _simpleUpload = require("./src/simple-upload");
var _thumb = require("./src/thumb");
var _name2Url = require("./src/name-2-url");
var _isOssUrl = require("./src/is-oss-url");
var _getRelativePathFromUrl = require("./src/get-relative-path-from-url");
var _isSupportWebp = require("./src/is-support-webp");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class QwOss {
  // 单例

  // TtOss的配置

  // ali-oss实例

  // 控制promise缓存,手动控制是因为ali-oss没有做promise缓存，多次同时请求时会请求多次接口

  // 控制缓存的标识
  isUpdatingOssClient = false;
  /**
   * @description: 安装方法
   * @param {options} 配置项
   * @return {QwOss} 单例
   */
  static install(options) {
    return new QwOss(options);
  }
  /**
   * @description: 重新安装方法,目前主要用于业务侧更新sts信息
   * @return {QwOss} 新的单例
   */
  static reinstall() {
    const TtOssOptions = this.getGlobalInstance().TtOssOptions;
    this.globalTtOssInstance = undefined;
    return new QwOss(TtOssOptions);
  }
  /**
   * @description: 获取单例
   * @return {QwOss} 单例
   */
  static getGlobalInstance() {
    if (!this.globalTtOssInstance) {
      throw new Error('请先初始化TtOss');
    }
    return this.globalTtOssInstance;
  }
  /**
   * @description: 业务上传
   * @param {File} file
   * @param {object} options
   * @return {Promise<OssUploadResponse>}
   */
  static upload(...args) {
    return this.getGlobalInstance().upload(...args);
  }
  /**
   * @description: 获取ali-oss实例
   * @return {Promise<AliOssInstance>}
   */
  static getOssClient() {
    return this.getGlobalInstance().getOssClient();
  }
  /**
   * @description: 对src或者oss的name进行签名，并增加缩放、格式等参数并签名
   * @param {string} src url或者oss的name
   * @param {object} options 配置项
   * @return {Promise<string>} 签名后的src
   */
  static thumb(...args) {
    return (0, _thumb.thumb)(...args);
  }
  /**
   * @description: oss返回的文件name转换成url
   * @param {string} src oss的name
   * @return {Promise<string>} 签名后的src
   */
  static name2Url(...args) {
    return (0, _name2Url.name2Url)(...args);
  }
  // 是否是oss的url
  /**
   * @description: oss返回的文件name转换成url
   * @param {string} src oss的name
   * @return {Promise<string>} 签名后的src
   */
  static isOssUrl(...args) {
    return (0, _isOssUrl.isOssUrl)(...args);
  }
  /**
   * @description: 是否是需要签名的url
   * @param {string} url
   * @return {boolean}
   */
  static isNeedSignOssUrl(...args) {
    return (0, _isOssUrl.isNeedSignOssUrl)(...args);
  }
  /**
   * @description: 截取oss的url，只保留name
   * @param {string} url
   * @return {string}
   */
  static getRelativePathFromUrl(...args) {
    return (0, _getRelativePathFromUrl.getRelativePathFromUrl)(...args);
  }
  // 获取oss的imageMIME，支持webp格式就返回webp
  static getOssImageMIME(...args) {
    return (0, _isSupportWebp.getOssImageMIME)(...args);
  }
  constructor(options) {
    if (QwOss.globalTtOssInstance) return QwOss.globalTtOssInstance;
    this.TtOssOptions = options;
    QwOss.globalTtOssInstance = this;
  }
  /**
   * @description: 业务上传（实例方法）
   * @param {File} file
   * @param {object} options
   * @return {Promise<OssUploadResponse>}
   */
  upload(file, options) {
    if (!options) return (0, _multipartUpload.multipartUpload)(file);else if ('chunked' in options) {
      if (options.chunked) return (0, _multipartUpload.multipartUpload)(file, options);else return (0, _simpleUpload.simpleUpload)(file, options);
    } else return (0, _multipartUpload.multipartUpload)(file, options);
  }
  /**
   * @description: 获取ali-oss实例（实例方法）
   * @return {Promise<AliOssInstance>}
   */
  getOssClient() {
    const getCurrentOssClientPromise = async () => {
      if (!this.currentOssClientPromise) {
        this.initOssClient();
        // 原本逻辑是30秒冗余时间，但是发现接口的expiration不是每次请求刷新，所以改为以下逻辑
      } else if (this.aliOssClient?.options?.expiration < Date.now()) {
        this.updateOssClient();
      }
      return this.currentOssClientPromise;
    };
    return getCurrentOssClientPromise();
  }

  // 设置ali-oss实例
  async setAliOssClient() {
    const ossClientOptions = await this.TtOssOptions2AliOssOptions();
    this.aliOssClient = new _aliOss.default(ossClientOptions);
    this.isUpdatingOssClient = false;
    return this.aliOssClient;
  }
  // 第一次初始化
  initOssClient() {
    if (this.isUpdatingOssClient) return;
    this.isUpdatingOssClient = true;
    this.currentOssClientPromise = this.setAliOssClient();
  }
  // 后续过期判断
  updateOssClient() {
    if (this.isUpdatingOssClient) return;
    this.isUpdatingOssClient = true;
    this.currentOssClientPromise = this.setAliOssClient();
  }
  // TtOss配置项=>ali-oss配置项
  async TtOssOptions2AliOssOptions() {
    if (this.isTtOssOptionsWithFetch(this.TtOssOptions)) {
      const ossApiInfo = await this.TtOssOptions.fetchOssInfo();
      const ossClientOptions = this.ossApiInfo2OssClientOptions(ossApiInfo);
      return ossClientOptions;
    } else if (this.isTtOssOptionsWithApi(this.TtOssOptions)) {
      const ossClientOptions = this.ossApiInfo2OssClientOptions(this.TtOssOptions);
      return ossClientOptions;
    } else {
      return this.TtOssOptions;
    }
  }
  // 接口oss信息=>前端需要的信息
  ossApiInfo2OssClientOptions(ossApiInfo) {
    const {
      accessKeyId,
      accessKeySecret,
      regionId,
      bucketName,
      securityToken,
      expiration
    } = ossApiInfo;
    return {
      expiration,
      // 接口返回，ali-oss不需要
      accessKeyId,
      accessKeySecret,
      region: `oss-${regionId}`,
      bucket: bucketName,
      stsToken: securityToken
    };
  }
  isTtOssOptionsWithFetch(options) {
    return !!options.fetchOssInfo;
  }
  isTtOssOptionsWithApi(options) {
    return !!options.securityToken;
  }
}
exports.QwOss = QwOss;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,