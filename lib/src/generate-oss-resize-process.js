"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.generateOssResizeProcess = generateOssResizeProcess;
const mode2m = {
  fit: "lfit",
  mfit: "mfit",
  // 'scale-down': 'lfit',
  contain: "pad",
  cover: "fill",
  fill: "fixed"
};
const rImageMima = /^image\/(.*)$/;
function generateOssResizeProcess(options) {
  if (options.maxRatio && options.maxRatio !== 1) {
    throw new Error("maxRatio only suport 1");
  }
  if (options.style) {
    return {
      style: options.style
    };
  }
  const process = {
    image: {}
  };
  let resize;
  if (options.width) {
    resize = {
      ...resize,
      w: options.width
    };
  }
  if (options.height) {
    resize = {
      ...resize,
      h: options.height
    };
  }
  if (options.length) {
    resize = {
      ...resize,
      l: options.length
    };
  }
  if (options.maxRatio && options.maxRatio !== 1) {
    console.warn("maxRatio only support 1");
    options.maxRatio = 1;
  }
  if (!options.maxRatio && resize) {
    resize = {
      ...resize,
      limit: 0
    };
  }
  if (options.mode && options.mode !== "fit") {
    if (mode2m[options.mode]) {
      resize = {
        ...resize,
        m: mode2m[options.mode]
      };
    } else {
      throw new Error(`do not support mode ${options.mode}`);
    }
  }
  if (options.backgroundColor) {
    resize = {
      ...resize,
      color: options.backgroundColor.replace(/^#/, "")
    };
  }
  if (resize) {
    process.image.resize = resize;
  }
  if (options.outType) {
    const m = options.outType.match(rImageMima);
    if (m && m[1]) {
      [, process.image.format] = m;
    }
  }
  return process;
}
var _default = generateOssResizeProcess;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2RlMm0iLCJmaXQiLCJtZml0IiwiY29udGFpbiIsImNvdmVyIiwiZmlsbCIsInJJbWFnZU1pbWEiLCJnZW5lcmF0ZU9zc1Jlc2l6ZVByb2Nlc3MiLCJvcHRpb25zIiwibWF4UmF0aW8iLCJFcnJvciIsInN0eWxlIiwicHJvY2VzcyIsImltYWdlIiwicmVzaXplIiwid2lkdGgiLCJ3IiwiaGVpZ2h0IiwiaCIsImxlbmd0aCIsImwiLCJjb25zb2xlIiwid2FybiIsImxpbWl0IiwibW9kZSIsIm0iLCJiYWNrZ3JvdW5kQ29sb3IiLCJjb2xvciIsInJlcGxhY2UiLCJvdXRUeXBlIiwibWF0Y2giLCJmb3JtYXQiXSwic291cmNlcyI6WyIuLi8uLi9saWJTcmMvc3JjL2dlbmVyYXRlLW9zcy1yZXNpemUtcHJvY2Vzcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPc3NQcm9jZXNzLCBUaHVtYk9wdGlvbnMsIE9zc1Byb2Nlc3NQYXJhbXNNYXAgfSBmcm9tIFwiLi4vdHlwaW5nc1wiO1xuXG5jb25zdCBtb2RlMm0gPSB7XG4gIGZpdDogXCJsZml0XCIsXG4gIG1maXQ6IFwibWZpdFwiLFxuICAvLyAnc2NhbGUtZG93bic6ICdsZml0JyxcbiAgY29udGFpbjogXCJwYWRcIixcbiAgY292ZXI6IFwiZmlsbFwiLFxuICBmaWxsOiBcImZpeGVkXCIsXG59O1xuXG5jb25zdCBySW1hZ2VNaW1hID0gL15pbWFnZVxcLyguKikkLztcblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlT3NzUmVzaXplUHJvY2VzcyhvcHRpb25zOiBUaHVtYk9wdGlvbnMpOiBPc3NQcm9jZXNzIHtcbiAgaWYgKG9wdGlvbnMubWF4UmF0aW8gJiYgb3B0aW9ucy5tYXhSYXRpbyAhPT0gMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIm1heFJhdGlvIG9ubHkgc3Vwb3J0IDFcIik7XG4gIH1cbiAgaWYgKG9wdGlvbnMuc3R5bGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3R5bGU6IG9wdGlvbnMuc3R5bGUsXG4gICAgfTtcbiAgfVxuICB0eXBlIEltYWdlUHJvY2VzcyA9IHsgcmVzaXplPzogT3NzUHJvY2Vzc1BhcmFtc01hcDsgZm9ybWF0Pzogc3RyaW5nIH07XG4gIGNvbnN0IHByb2Nlc3MgPSB7IGltYWdlOiB7fSBhcyBJbWFnZVByb2Nlc3MgfTtcbiAgbGV0IHJlc2l6ZTogdW5kZWZpbmVkIHwgT3NzUHJvY2Vzc1BhcmFtc01hcDtcbiAgaWYgKG9wdGlvbnMud2lkdGgpIHtcbiAgICByZXNpemUgPSB7XG4gICAgICAuLi5yZXNpemUsXG4gICAgICB3OiBvcHRpb25zLndpZHRoLFxuICAgIH07XG4gIH1cbiAgaWYgKG9wdGlvbnMuaGVpZ2h0KSB7XG4gICAgcmVzaXplID0ge1xuICAgICAgLi4ucmVzaXplLFxuICAgICAgaDogb3B0aW9ucy5oZWlnaHQsXG4gICAgfTtcbiAgfVxuICBpZiAob3B0aW9ucy5sZW5ndGgpIHtcbiAgICByZXNpemUgPSB7XG4gICAgICAuLi5yZXNpemUsXG4gICAgICBsOiBvcHRpb25zLmxlbmd0aCxcbiAgICB9O1xuICB9XG5cbiAgaWYgKG9wdGlvbnMubWF4UmF0aW8gJiYgb3B0aW9ucy5tYXhSYXRpbyAhPT0gMSkge1xuICAgIGNvbnNvbGUud2FybihcIm1heFJhdGlvIG9ubHkgc3VwcG9ydCAxXCIpO1xuICAgIG9wdGlvbnMubWF4UmF0aW8gPSAxO1xuICB9XG5cbiAgaWYgKCFvcHRpb25zLm1heFJhdGlvICYmIHJlc2l6ZSkge1xuICAgIHJlc2l6ZSA9IHtcbiAgICAgIC4uLnJlc2l6ZSxcbiAgICAgIGxpbWl0OiAwLFxuICAgIH07XG4gIH1cblxuICBpZiAob3B0aW9ucy5tb2RlICYmIG9wdGlvbnMubW9kZSAhPT0gXCJmaXRcIikge1xuICAgIGlmIChtb2RlMm1bb3B0aW9ucy5tb2RlXSkge1xuICAgICAgcmVzaXplID0ge1xuICAgICAgICAuLi5yZXNpemUsXG4gICAgICAgIG06IG1vZGUybVtvcHRpb25zLm1vZGVdLFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBkbyBub3Qgc3VwcG9ydCBtb2RlICR7b3B0aW9ucy5tb2RlfWApO1xuICAgIH1cbiAgfVxuICBpZiAob3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICByZXNpemUgPSB7XG4gICAgICAuLi5yZXNpemUsXG4gICAgICBjb2xvcjogb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IucmVwbGFjZSgvXiMvLCBcIlwiKSxcbiAgICB9O1xuICB9XG4gIGlmIChyZXNpemUpIHtcbiAgICBwcm9jZXNzLmltYWdlLnJlc2l6ZSA9IHJlc2l6ZTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLm91dFR5cGUpIHtcbiAgICBjb25zdCBtID0gb3B0aW9ucy5vdXRUeXBlLm1hdGNoKHJJbWFnZU1pbWEpO1xuICAgIGlmIChtICYmIG1bMV0pIHtcbiAgICAgIFssIHByb2Nlc3MuaW1hZ2UuZm9ybWF0XSA9IG07XG4gICAgfVxuICB9XG4gIHJldHVybiBwcm9jZXNzO1xufVxuZXhwb3J0IGRlZmF1bHQgZ2VuZXJhdGVPc3NSZXNpemVQcm9jZXNzO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUEsTUFBTUEsTUFBTSxHQUFHO0VBQ2JDLEdBQUcsRUFBRSxNQUFNO0VBQ1hDLElBQUksRUFBRSxNQUFNO0VBQ1o7RUFDQUMsT0FBTyxFQUFFLEtBQUs7RUFDZEMsS0FBSyxFQUFFLE1BQU07RUFDYkMsSUFBSSxFQUFFO0FBQ1IsQ0FBQztBQUVELE1BQU1DLFVBQVUsR0FBRyxlQUFlO0FBRTNCLFNBQVNDLHdCQUF3QixDQUFDQyxPQUFxQixFQUFjO0VBQzFFLElBQUlBLE9BQU8sQ0FBQ0MsUUFBUSxJQUFJRCxPQUFPLENBQUNDLFFBQVEsS0FBSyxDQUFDLEVBQUU7SUFDOUMsTUFBTSxJQUFJQyxLQUFLLENBQUMsd0JBQXdCLENBQUM7RUFDM0M7RUFDQSxJQUFJRixPQUFPLENBQUNHLEtBQUssRUFBRTtJQUNqQixPQUFPO01BQ0xBLEtBQUssRUFBRUgsT0FBTyxDQUFDRztJQUNqQixDQUFDO0VBQ0g7RUFFQSxNQUFNQyxPQUFPLEdBQUc7SUFBRUMsS0FBSyxFQUFFLENBQUM7RUFBa0IsQ0FBQztFQUM3QyxJQUFJQyxNQUF1QztFQUMzQyxJQUFJTixPQUFPLENBQUNPLEtBQUssRUFBRTtJQUNqQkQsTUFBTSxHQUFHO01BQ1AsR0FBR0EsTUFBTTtNQUNURSxDQUFDLEVBQUVSLE9BQU8sQ0FBQ087SUFDYixDQUFDO0VBQ0g7RUFDQSxJQUFJUCxPQUFPLENBQUNTLE1BQU0sRUFBRTtJQUNsQkgsTUFBTSxHQUFHO01BQ1AsR0FBR0EsTUFBTTtNQUNUSSxDQUFDLEVBQUVWLE9BQU8sQ0FBQ1M7SUFDYixDQUFDO0VBQ0g7RUFDQSxJQUFJVCxPQUFPLENBQUNXLE1BQU0sRUFBRTtJQUNsQkwsTUFBTSxHQUFHO01BQ1AsR0FBR0EsTUFBTTtNQUNUTSxDQUFDLEVBQUVaLE9BQU8sQ0FBQ1c7SUFDYixDQUFDO0VBQ0g7RUFFQSxJQUFJWCxPQUFPLENBQUNDLFFBQVEsSUFBSUQsT0FBTyxDQUFDQyxRQUFRLEtBQUssQ0FBQyxFQUFFO0lBQzlDWSxPQUFPLENBQUNDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQztJQUN2Q2QsT0FBTyxDQUFDQyxRQUFRLEdBQUcsQ0FBQztFQUN0QjtFQUVBLElBQUksQ0FBQ0QsT0FBTyxDQUFDQyxRQUFRLElBQUlLLE1BQU0sRUFBRTtJQUMvQkEsTUFBTSxHQUFHO01BQ1AsR0FBR0EsTUFBTTtNQUNUUyxLQUFLLEVBQUU7SUFDVCxDQUFDO0VBQ0g7RUFFQSxJQUFJZixPQUFPLENBQUNnQixJQUFJLElBQUloQixPQUFPLENBQUNnQixJQUFJLEtBQUssS0FBSyxFQUFFO0lBQzFDLElBQUl4QixNQUFNLENBQUNRLE9BQU8sQ0FBQ2dCLElBQUksQ0FBQyxFQUFFO01BQ3hCVixNQUFNLEdBQUc7UUFDUCxHQUFHQSxNQUFNO1FBQ1RXLENBQUMsRUFBRXpCLE1BQU0sQ0FBQ1EsT0FBTyxDQUFDZ0IsSUFBSTtNQUN4QixDQUFDO0lBQ0gsQ0FBQyxNQUFNO01BQ0wsTUFBTSxJQUFJZCxLQUFLLENBQUUsdUJBQXNCRixPQUFPLENBQUNnQixJQUFLLEVBQUMsQ0FBQztJQUN4RDtFQUNGO0VBQ0EsSUFBSWhCLE9BQU8sQ0FBQ2tCLGVBQWUsRUFBRTtJQUMzQlosTUFBTSxHQUFHO01BQ1AsR0FBR0EsTUFBTTtNQUNUYSxLQUFLLEVBQUVuQixPQUFPLENBQUNrQixlQUFlLENBQUNFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRTtJQUNqRCxDQUFDO0VBQ0g7RUFDQSxJQUFJZCxNQUFNLEVBQUU7SUFDVkYsT0FBTyxDQUFDQyxLQUFLLENBQUNDLE1BQU0sR0FBR0EsTUFBTTtFQUMvQjtFQUVBLElBQUlOLE9BQU8sQ0FBQ3FCLE9BQU8sRUFBRTtJQUNuQixNQUFNSixDQUFDLEdBQUdqQixPQUFPLENBQUNxQixPQUFPLENBQUNDLEtBQUssQ0FBQ3hCLFVBQVUsQ0FBQztJQUMzQyxJQUFJbUIsQ0FBQyxJQUFJQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7TUFDYixHQUFHYixPQUFPLENBQUNDLEtBQUssQ0FBQ2tCLE1BQU0sQ0FBQyxHQUFHTixDQUFDO0lBQzlCO0VBQ0Y7RUFDQSxPQUFPYixPQUFPO0FBQ2hCO0FBQUMsZUFDY0wsd0JBQXdCO0FBQUEifQ==