"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultMultipartUploadParams = exports.default = void 0;
exports.multipartUpload = multipartUpload;
var _enum = require("../enum");
var _file2Hash = require("./file-2-hash");
var _getOssClient = require("./get-oss-client");
async function getUploadId(file, {
  client,
  name
}) {
  const res = await client.initMultipartUpload(`${name || file.name}`, {
    headers: {
      'Content-Type': file.type ?? 'application/octet-stream'
    }
  });
  console.log(res);
  return res.uploadId;
}
const defaultMultipartUploadParams = {
  dir: _enum.OssDirEnum.DEFAULT,
  chunkSize: 1024 * 1024,
  onProgress: (progress, loaded, total) => {}
};

/**
 * 分片上传。支持onProgress（进度查询）、断点续传、中断。
 * @param file
 * @param options
 * @returns
 * @example //不使用中断时的语法
 * await multipartUpload(file[, options])
 * @example //使用中断时的语法
 * const controller = multipartUpload(file[, options])
 * //异步触发abort函数
 * setTimeout(() => controller.abort(), 3000)
 * await controller
 */
exports.defaultMultipartUploadParams = defaultMultipartUploadParams;
const uploadLocalStorage = {
  get(key) {
    const name = localStorage.getItem(`uploadName:${key}`);
    const uploadId = +(localStorage.getItem(`uploadId:${key}`) || '');
    return {
      name,
      uploadId
    };
  },
  set(key, uploadId) {
    localStorage.setItem(`uploadId:${key}`, `${uploadId}`);
    localStorage.setItem(`uploadName:${key}`, key);
  },
  remove(key) {
    localStorage.removeItem(`uploadId:${key}`);
    localStorage.removeItem(`uploadName:${key}`);
  }
};
function multipartUpload(file, options = defaultMultipartUploadParams) {
  let abortController;
  const _upload = async () => {
    try {
      abortController = new AbortController();
    } catch (error) {
      abortController = undefined;
    }
    const {
      dir,
      chunkSize,
      onProgress
    } = {
      ...defaultMultipartUploadParams,
      ...options
    };
    const name = await (0, _file2Hash.file2OssName)(file, {
      dir,
      chunkLength: chunkSize
    });
    const detectAbort = () => {
      if (abortController && abortController.signal?.aborted) {
        uploadLocalStorage.remove(name);
        throw new Error('检测到中断触发');
      }
    };
    detectAbort();
    const client = await (0, _getOssClient.getOssClient)();
    const uploadId = await getUploadId(file, {
      client,
      name
    });
    uploadLocalStorage.set(name, `${uploadId}`);
    if (!uploadId) throw new Error('获取uploadId失败');
    const chunkLength = Math.ceil(file.size / chunkSize);
    const doneList = [];
    const parts = await client.listParts(name, uploadId.toString());
    const startIdx = +parts.nextPartNumberMarker || 0;
    if (startIdx > 0 && startIdx < chunkLength) {
      parts.parts.forEach(part => doneList.push({
        number: +part.PartNumber,
        etag: part.ETag
      }));
    }
    for (let i = startIdx; i < chunkLength; i++) {
      const start = chunkSize * i;
      const end = Math.min(start + chunkSize, file.size);
      const part = await client.uploadPart(name, uploadId.toString(), i + 1, file, start, end);
      console.log(`chunk size: ${end - start}`);
      console.log(`Upload part${i + 1} finished`);
      doneList.push({
        number: i + 1,
        etag: part.etag
      });
      onProgress(+(100 * end / file.size).toFixed(2), end, file.size);
      detectAbort();
    }
    // console.log(doneList)
    const uploadResult = await client.completeMultipartUpload(name, uploadId.toString(), doneList);
    console.log(uploadResult);
    uploadLocalStorage.remove(name);
    return uploadResult;
  };
  return {
    then(...args) {
      return _upload().then(...args);
    },
    abort() {
      if (abortController === undefined) {
        throw new Error('上传还未开始');
      } else if (!('AbortController' in globalThis)) {
        console.warn('当前浏览器缺乏AbortController支持');
      } else abortController.abort();
    }
  };
}
var _default = multipartUpload; // const a = multipartUpload(new File()));
// a.abort()
// const res = await a
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,