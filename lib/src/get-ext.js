"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.getExt = getExt;
exports.getFileName = getFileName;
exports.mimeToExt = void 0;
// TODO: 暂时只是写了图片类型
const rArr = [/^image\/(\w+)$/, /^(?:text|application)\/(json)$/];
const type2ext = {};
/**
 * 将mimeType转成后缀名
 * @param mime mimeType
 */
const mimeToExt = mime => {
  mime = mime.toLowerCase();
  if (type2ext[mime]) return type2ext[mime];
  for (let i = 0; i < rArr.length; i++) {
    const r = rArr[i];
    const m = mime.match(r);
    if (m) {
      return m[1];
    }
  }
  return '';
};
exports.mimeToExt = mimeToExt;
const rExt = /\.\w+$/;
/**
 * 获取目标的文件名
 * @param target
 */
function getFileName(target) {
  if (target instanceof File) return target.name;
  const queryIndex = target.indexOf('?');
  if (queryIndex !== -1) {
    target = target.substring(0, queryIndex);
  }
  const lastSlashIndex = target.lastIndexOf('/');
  if (lastSlashIndex !== -1) {
    target = target.substr(lastSlashIndex + 1);
  }
  return target;
}

/**
 * 获取目标的后缀名
 * @param target
 */
function getExt(target) {
  let file;
  let name;
  if (target instanceof File) {
    file = target;
    ({
      name
    } = target);
  } else {
    name = target;
  }
  if (name) {
    target = getFileName(name);
    const extIndex = target.search(rExt);
    if (extIndex !== -1) {
      return target.substring(extIndex + 1);
    }
  }
  if (file) {
    const mime = file.type;
    if (mime) {
      return mimeToExt(mime);
    }
  }
  return '';
}
var _default = getExt;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyQXJyIiwidHlwZTJleHQiLCJtaW1lVG9FeHQiLCJtaW1lIiwidG9Mb3dlckNhc2UiLCJpIiwibGVuZ3RoIiwiciIsIm0iLCJtYXRjaCIsInJFeHQiLCJnZXRGaWxlTmFtZSIsInRhcmdldCIsIkZpbGUiLCJuYW1lIiwicXVlcnlJbmRleCIsImluZGV4T2YiLCJzdWJzdHJpbmciLCJsYXN0U2xhc2hJbmRleCIsImxhc3RJbmRleE9mIiwic3Vic3RyIiwiZ2V0RXh0IiwiZmlsZSIsImV4dEluZGV4Iiwic2VhcmNoIiwidHlwZSJdLCJzb3VyY2VzIjpbIi4uLy4uL2xpYlNyYy9zcmMvZ2V0LWV4dC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUT0RPOiDmmoLml7blj6rmmK/lhpnkuoblm77niYfnsbvlnotcbmNvbnN0IHJBcnIgPSBbL15pbWFnZVxcLyhcXHcrKSQvLCAvXig/OnRleHR8YXBwbGljYXRpb24pXFwvKGpzb24pJC9dXG5jb25zdCB0eXBlMmV4dDogeyBbbWltZTogc3RyaW5nXTogc3RyaW5nIH0gPSB7fVxuLyoqXG4gKiDlsIZtaW1lVHlwZei9rOaIkOWQjue8gOWQjVxuICogQHBhcmFtIG1pbWUgbWltZVR5cGVcbiAqL1xuZXhwb3J0IGNvbnN0IG1pbWVUb0V4dCA9IChtaW1lOiBzdHJpbmcpID0+IHtcbiAgbWltZSA9IG1pbWUudG9Mb3dlckNhc2UoKVxuICBpZiAodHlwZTJleHRbbWltZV0pIHJldHVybiB0eXBlMmV4dFttaW1lXVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHJBcnIubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCByID0gckFycltpXVxuICAgIGNvbnN0IG0gPSBtaW1lLm1hdGNoKHIpXG4gICAgaWYgKG0pIHtcbiAgICAgIHJldHVybiBtWzFdXG4gICAgfVxuICB9XG4gIHJldHVybiAnJ1xufVxuXG5jb25zdCByRXh0ID0gL1xcLlxcdyskL1xuLyoqXG4gKiDojrflj5bnm67moIfnmoTmlofku7blkI1cbiAqIEBwYXJhbSB0YXJnZXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZpbGVOYW1lKHRhcmdldDogRmlsZSB8IHN0cmluZykge1xuICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgRmlsZSkgcmV0dXJuIHRhcmdldC5uYW1lXG4gIGNvbnN0IHF1ZXJ5SW5kZXggPSB0YXJnZXQuaW5kZXhPZignPycpXG4gIGlmIChxdWVyeUluZGV4ICE9PSAtMSkge1xuICAgIHRhcmdldCA9IHRhcmdldC5zdWJzdHJpbmcoMCwgcXVlcnlJbmRleClcbiAgfVxuICBjb25zdCBsYXN0U2xhc2hJbmRleCA9IHRhcmdldC5sYXN0SW5kZXhPZignLycpXG4gIGlmIChsYXN0U2xhc2hJbmRleCAhPT0gLTEpIHtcbiAgICB0YXJnZXQgPSB0YXJnZXQuc3Vic3RyKGxhc3RTbGFzaEluZGV4ICsgMSlcbiAgfVxuICByZXR1cm4gdGFyZ2V0XG59XG5cbi8qKlxuICog6I635Y+W55uu5qCH55qE5ZCO57yA5ZCNXG4gKiBAcGFyYW0gdGFyZ2V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRFeHQodGFyZ2V0OiBzdHJpbmcgfCBGaWxlKSB7XG4gIGxldCBmaWxlOiBGaWxlIHwgdW5kZWZpbmVkXG4gIGxldCBuYW1lOiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIEZpbGUpIHtcbiAgICBmaWxlID0gdGFyZ2V0O1xuICAgICh7IG5hbWUgfSA9IHRhcmdldClcbiAgfSBlbHNlIHtcbiAgICBuYW1lID0gdGFyZ2V0XG4gIH1cblxuICBpZiAobmFtZSkge1xuICAgIHRhcmdldCA9IGdldEZpbGVOYW1lKG5hbWUpXG4gICAgY29uc3QgZXh0SW5kZXggPSB0YXJnZXQuc2VhcmNoKHJFeHQpXG4gICAgaWYgKGV4dEluZGV4ICE9PSAtMSkge1xuICAgICAgcmV0dXJuIHRhcmdldC5zdWJzdHJpbmcoZXh0SW5kZXggKyAxKVxuICAgIH1cbiAgfVxuXG4gIGlmIChmaWxlKSB7XG4gICAgY29uc3QgbWltZSA9IGZpbGUudHlwZVxuICAgIGlmIChtaW1lKSB7XG4gICAgICByZXR1cm4gbWltZVRvRXh0KG1pbWUpXG4gICAgfVxuICB9XG4gIHJldHVybiAnJ1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRFeHRcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQSxNQUFNQSxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxnQ0FBZ0MsQ0FBQztBQUNqRSxNQUFNQyxRQUFvQyxHQUFHLENBQUMsQ0FBQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNPLE1BQU1DLFNBQVMsR0FBSUMsSUFBWSxJQUFLO0VBQ3pDQSxJQUFJLEdBQUdBLElBQUksQ0FBQ0MsV0FBVyxFQUFFO0VBQ3pCLElBQUlILFFBQVEsQ0FBQ0UsSUFBSSxDQUFDLEVBQUUsT0FBT0YsUUFBUSxDQUFDRSxJQUFJLENBQUM7RUFDekMsS0FBSyxJQUFJRSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdMLElBQUksQ0FBQ00sTUFBTSxFQUFFRCxDQUFDLEVBQUUsRUFBRTtJQUNwQyxNQUFNRSxDQUFDLEdBQUdQLElBQUksQ0FBQ0ssQ0FBQyxDQUFDO0lBQ2pCLE1BQU1HLENBQUMsR0FBR0wsSUFBSSxDQUFDTSxLQUFLLENBQUNGLENBQUMsQ0FBQztJQUN2QixJQUFJQyxDQUFDLEVBQUU7TUFDTCxPQUFPQSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2I7RUFDRjtFQUNBLE9BQU8sRUFBRTtBQUNYLENBQUM7QUFBQTtBQUVELE1BQU1FLElBQUksR0FBRyxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0MsV0FBVyxDQUFDQyxNQUFxQixFQUFFO0VBQ2pELElBQUlBLE1BQU0sWUFBWUMsSUFBSSxFQUFFLE9BQU9ELE1BQU0sQ0FBQ0UsSUFBSTtFQUM5QyxNQUFNQyxVQUFVLEdBQUdILE1BQU0sQ0FBQ0ksT0FBTyxDQUFDLEdBQUcsQ0FBQztFQUN0QyxJQUFJRCxVQUFVLEtBQUssQ0FBQyxDQUFDLEVBQUU7SUFDckJILE1BQU0sR0FBR0EsTUFBTSxDQUFDSyxTQUFTLENBQUMsQ0FBQyxFQUFFRixVQUFVLENBQUM7RUFDMUM7RUFDQSxNQUFNRyxjQUFjLEdBQUdOLE1BQU0sQ0FBQ08sV0FBVyxDQUFDLEdBQUcsQ0FBQztFQUM5QyxJQUFJRCxjQUFjLEtBQUssQ0FBQyxDQUFDLEVBQUU7SUFDekJOLE1BQU0sR0FBR0EsTUFBTSxDQUFDUSxNQUFNLENBQUNGLGNBQWMsR0FBRyxDQUFDLENBQUM7RUFDNUM7RUFDQSxPQUFPTixNQUFNO0FBQ2Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTUyxNQUFNLENBQUNULE1BQXFCLEVBQUU7RUFDNUMsSUFBSVUsSUFBc0I7RUFDMUIsSUFBSVIsSUFBd0I7RUFDNUIsSUFBSUYsTUFBTSxZQUFZQyxJQUFJLEVBQUU7SUFDMUJTLElBQUksR0FBR1YsTUFBTTtJQUNiLENBQUM7TUFBRUU7SUFBSyxDQUFDLEdBQUdGLE1BQU07RUFDcEIsQ0FBQyxNQUFNO0lBQ0xFLElBQUksR0FBR0YsTUFBTTtFQUNmO0VBRUEsSUFBSUUsSUFBSSxFQUFFO0lBQ1JGLE1BQU0sR0FBR0QsV0FBVyxDQUFDRyxJQUFJLENBQUM7SUFDMUIsTUFBTVMsUUFBUSxHQUFHWCxNQUFNLENBQUNZLE1BQU0sQ0FBQ2QsSUFBSSxDQUFDO0lBQ3BDLElBQUlhLFFBQVEsS0FBSyxDQUFDLENBQUMsRUFBRTtNQUNuQixPQUFPWCxNQUFNLENBQUNLLFNBQVMsQ0FBQ00sUUFBUSxHQUFHLENBQUMsQ0FBQztJQUN2QztFQUNGO0VBRUEsSUFBSUQsSUFBSSxFQUFFO0lBQ1IsTUFBTW5CLElBQUksR0FBR21CLElBQUksQ0FBQ0csSUFBSTtJQUN0QixJQUFJdEIsSUFBSSxFQUFFO01BQ1IsT0FBT0QsU0FBUyxDQUFDQyxJQUFJLENBQUM7SUFDeEI7RUFDRjtFQUNBLE9BQU8sRUFBRTtBQUNYO0FBQUMsZUFFY2tCLE1BQU07QUFBQSJ9